buildscript {
    ext {
        springBootVersion = '2.2.0.RELEASE'
        springRepo = 'http://repo.spring.io/libs-release'
        dubboVersion = '2.7.1'
    }

////        springBootVersion = '2.2.0.M4'
//        springRepo = 'http://repo.spring.io/milestone'
//
//    }
    repositories {
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url springRepo }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
//        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.springframework:springloaded:1.2.0.RELEASE'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id "com.github.hierynomus.license" version "0.15.0" apply false
    id "io.freefair.lombok" version "4.1.0" apply false
    id 'idea'
    id 'maven-publish'
    id 'signing'
    id 'java-library'

    id "net.ltgt.errorprone" version "1.1.1" apply false
}

ext.flycatVersion = '0.2.0-SNAPSHOT'
ext.flycatGroup = 'com.github.zgqq'

ext.configDir = "${project.rootDir}/config"
ext.checkstyleDir = "${configDir}/checkstyle"
ext.gradleConfigDir = "${configDir}/gradle"
ext.vJavaLang = '1.8'

wrapper.gradleVersion = '5.4.1'


apply from: "${gradleConfigDir}/env.gradle"


ext.javaProjects = subprojects.findAll {
    !it.name.endsWith("template")
}

configure(javaProjects) { project ->

    ext.needCheckCompile = !project.name.endsWith("agent")

    apply from: "${gradleConfigDir}/javaProject.gradle"

    ext.needCheck = !project.name.endsWith("agent")


    if (needCheck) {
        ext.checkPackage = "com.github.flycat"
        apply from: "${gradleConfigDir}/errorprone.gradle"
    }


    if (needCheck) {
        apply plugin: 'checkstyle'
        checkstyle {
            toolVersion "8.21"
            configFile file("${checkstyleDir}/checkstyle.xml")
            configProperties.checkstyleSuppressionsPath = file("${checkstyleDir}/suppressions.xml").absolutePath
        }
        checkstyleMain {
            source = 'src/main/java'
        }
        checkstyleTest {
            source = 'src/test/java'
        }
    }


    group "$flycatGroup"
    version "$flycatVersion"


    targetCompatibility = vJavaLang
    sourceCompatibility = vJavaLang

    configurations {

//        all*.exclude group: 'org.hibernate.validator'

        // use fastjson
//        all*.exclude group: 'com.fasterxml.jackson.core'
//        all*.exclude group: 'com.fasterxml.jackson.datatype'
//        all*.exclude group: 'com.fasterxml.jackson.module'

        // replaced with jcl-over-slf4j
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        // replaced with log4j-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j'
//        compile.exclude module: "spring-boot-starter-tomcat"
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }


    if (needCheck) {
        apply plugin: 'com.github.hierynomus.license'
        license {
            header rootProject.file("LICENSE")
        }
        license {
            header = rootProject.file('LICENSE')
            ext.year = Calendar.getInstance().get(Calendar.YEAR)
            ext.name = 'zgqq'
            ext.email = 'zgqjava@gmail.com'
            exclude "**/*Test.java"
            include "**/*.groovy"
            includes(["**/*.java", "**/*.properties"])
        }
    }

}

//ext.bootProjects = javaProjects.findAll {
//    it.name.startsWith("flycat-springboot-sba")
//}

//configure(bootProjects) { project ->
//    apply from: "${gradleConfigDir}/bootProject.gradle"
//}

ext.jarProjects = javaProjects.findAll {
    !it.name.endsWith("-sba")
}

apply plugin: 'idea'
idea {
//    pathVariables GRADLE_HOME: file("$buildDir")
    println("build dir $buildDir")
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/java/main")
        downloadJavadoc = false
        downloadSources = true
    }
}


configure(jarProjects) { project ->

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'


    task sourceJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    signing {
        useGpgCmd()
        sign configurations.archives
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                customizePom(pom)
                groupId "$flycatGroup"
                artifactId "${project.name}"
                version "$flycatVersion"

                from components.java

                // create the sign pom artifact
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                artifact(sourceJar) {
                    classifier = 'sources'
                }
                artifact(javadocJar) {
                    classifier = 'javadoc'
                }

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }


            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                // url "https://oss.sonatype.org/content/repositories/snapshots"
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }


    }


    model {
        tasks.generatePomFileForMavenJavaPublication {
            destination = file("$buildDir/generated-pom.xml")
        }
        tasks.publishMavenJavaPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenJavaPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }


}


def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Simplify Java web and microservice development'
            name 'github.flycat Java'
            url 'https://github.com/zgqq/flycat'
            organization {
                name 'com.github.zgqq'
                url 'https://github.com/zgqq'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/zgqq/flycat/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/zgqq/flycat/blob/develop/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/zgqq/flycat'
                connection 'scm:git:git://github.com/zgqq/flycat.git'
                developerConnection 'scm:git:ssh://git@github.com:zgqq/flycat.git'
            }
            developers {
                developer {
                    name 'zgqq'
                }
            }
        }
    }
}

//bootJar.enabled = false
//tasks.named("compileTestJava").configure {
//    options.errorprone.enabled = false
//}


