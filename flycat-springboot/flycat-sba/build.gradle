buildscript {
    ext.configDir = "../../config"
    ext.gradleConfigDir = "${configDir}/gradle"
    apply from: "${gradleConfigDir}/versionManagement.gradle"
    ext {
        springBootVersion = FlycatLibVersion.spring_boot_version
        springManagementVersion = FlycatLibVersion.spring_management_version
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.spring.io/plugins-release-local' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" //
        classpath "io.spring.gradle:dependency-management-plugin:${springManagementVersion}"
    }

}

plugins {
//    id 'org.springframework.boot' version "2.7.4" apply false
//    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
//    id 'org.springframework.boot' version "2.7.4" apply true
//    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply true
    id 'java'
    id 'idea'
    // id "io.freefair.lombok" version "4.1.0"
    id "net.ltgt.errorprone" version "1.1.1" apply false

    id 'org.hidetake.ssh' version '2.10.1'
//    id "net.rdrei.android.buildtimetracker" version "0.11.0"

    id 'com.google.cloud.tools.jib' version '3.3.1' apply false
//    id 'com.google.cloud.tools.jib' version '3.2.0' apply false
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

//ext.configDir = "../../config"
//ext.gradleConfigDir = "${configDir}/gradle"
//ext.env = env
ext.vJavaLang = '17'

apply from: "${gradleConfigDir}/env.gradle"
//apply from: "${gradleConfigDir}/autoConfigure.gradle"
apply from: "${gradleConfigDir}/readJsonConfig.gradle"


//spring.security.user.name: zgqq
//spring.security.user.password: zgqq
//server.port: 8081
//spring.boot.admin.context-path: /sba-admin

if (getSubConfigValue('infra_sba', 'enable', env)) {
    def router_path = getSubConfigConnectValue('infra_sba', 'router_path', env)
    def port = getSubConfigConnectValue('infra_sba', 'app_port', env)
    def user = getSubConfigConnectValue('infra_sba', 'sba_user', env)
    def password = getSubConfigConnectValue('infra_sba', 'sba_password', env)
    addCustomJvmArgs(["-Dspring.security.user.name=${user}".toString(),
                      "-Dspring.security.user.password=${password}".toString(),
                      "-Dserver.port=${port}".toString(),
                      "-Dspring.boot.admin.context-path=${router_path}".toString(),
    ])
}
def webServer = getSubConfigValue('infra_sba', 'web_server', env, 'tomcat')

ext.configObj = configObj['infra_sba']
apply from: "${gradleConfigDir}/configureSbaApp.gradle"
ext.appClassName = 'com.github.flycat.sba.SpringBootAdminApplication'
//ext.jmxPort = getSubConfigValue('infra_sba', 'jmx_port', env, 0)
//ext.dockerImage = getSubConfigValue('infra_sba', 'docker_repo', env, 'zgqq/flycat-sba')
//ext.containerPort = getSubConfigValue('infra_sba', 'app_port', env, 8081)

apply from: "${gradleConfigDir}/javaProject.gradle"
apply from: "${gradleConfigDir}/bootappProject.gradle"
apply from: "${gradleConfigDir}/dockerProject.gradle"

dependencies {
//    implementation project(':flycat-context')
//    implementation project(':flycat-spi')

//    implementation group: 'de.codecentric', name: 'spring-boot-admin-starter-server', version: '2.7.5'
    implementation(FlycatLibVersion.spring_boot_admin_server)
    // api"org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    // implementation("org.springframework.boot:spring-boot-starter-security:$springBootVersion")

    println("Using web server ${webServer}")
    if (webServer == "underflow") {
        implementation("org.springframework.boot:spring-boot-starter-web") {
            exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
        }
        implementation "org.springframework.boot:spring-boot-starter-undertow"
    } else {
        implementation("org.springframework.boot:spring-boot-starter-web")
    }

    implementation("org.springframework.boot:spring-boot-starter-security")

}