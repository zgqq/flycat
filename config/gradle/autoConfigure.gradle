import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper()

def configFile = "./config.json"
if (hasProperty("config")) {
    configFile = config
}

def fileObj = new File(configFile)
if (!fileObj.isFile()) {
    println("Not found config file " + configFile)
    return
}

def data = jsonSlurper.parse(fileObj)
ext.configObj = data

//if (hasProperty("configKey")) {
//    data = data[configKey]
//}

//get_data_value(key, env) {
//    if 'env_overwrite' in data.keys() and env in data['env_overwrite']:
//    if key in data['env_overwrite'][env].keys():
//    return data['env_overwrite'][env][key]
//    return data[key]
//}

println("Read config: ${data}")
//rootProject.name = data['app_name']

ext.getConfigValue = { configData, key, env, defaultValue = null ->
    env = env.toString()
    // Method body here
    println("getConfigValue ${key}, ${env}")
//    if ('env_overwrite' in configData.keySet() && env in configData['env_overwrite']) {
//        if (key in configData['env_overwrite'][env].keySet())
//            return configData['env_overwrite'][env][key]
//    }
    if ('env_overwrite' in configData.keySet() && configData['env_overwrite'].containsKey(env)) {
        if (key in configData['env_overwrite'][env].keySet())
            return configData['env_overwrite'][env][key]
    }
    if (key in configData.keySet()) {
        return configData[key]
    }
    return defaultValue
}


ext.getSubConfigValue = { name, key, env, defaultValue = null ->
    env = env.toString()
    println("getSubConfigValue ${name}, ${key}, ${env} ")
    if (name in data.keySet()) {
        def configData = data[name]
//        def arr = ['local', 'dev']
//        println("get env_overwrite ${name}, ${key}, env:${env}, ${configData['env_overwrite'].keySet()}," +
//                "${'env_overwrite' in configData.keySet()},env in env_overwrite:${env.toString() in configData['env_overwrite'].keySet()}, " +
//                "${'local' in arr}, ${arr}, ss${configData['env_overwrite'].containsKey(env)}")
        return getConfigValue(configData, key, env, defaultValue)
    }
    return defaultValue
}


ext.addCustomJvmArgs = { argsArr ->
    if (project.hasProperty('customJvmArgs')) {
        ext.customJvmArgs += argsArr
    } else {
        ext.customJvmArgs = argsArr
    }
}


if (getSubConfigValue('infra_redis', 'enable', env)) {
    def host = getSubConfigValue('infra_redis', 'host', env)
    def password = getSubConfigValue('infra_redis', 'password', env)
    def port = getSubConfigValue('infra_redis', 'port', env)

    if (isStartupFromCode()) {
        host = "localhost"
    }
    addCustomJvmArgs(["-Dflycat.redis.primary.enabled=true",
                      "-Dflycat.redis.primary.host=${host}".toString(),
                      "-Dflycat.redis.primary.port=${port}".toString(),
                      "-Dflycat.redis.primary.password=${password}".toString()])
}



if (getSubConfigValue('infra_nacos', 'enable', env)) {
    def host = getSubConfigValue('infra_nacos', 'host', env)
    def port = getSubConfigValue('infra_nacos', 'port', env)

    def nacosUser = getSubConfigValue('infra_nacos', 'nacos_user', env)
    def nacosPassword = getSubConfigValue('infra_nacos', 'nacos_password', env)
    if (isStartupFromCode()) {
        host = "localhost"
    }
    addCustomJvmArgs(["-Dflycat.nacos.config.server-addr=${host}:${port}".toString(),
                      "-Dflycat.nacos.config.user=${nacosUser}".toString(),
                      "-Dflycat.nacos.config.password=${nacosPassword}".toString()
    ])
}

//def executeDockerBuild = false
//def executingTasks = project.gradle.startParameter.taskNames
//if (executingTasks != null && !executingTasks.isEmpty()) {
//    executeDockerBuild = 'jib' in executingTasks
//            || 'jibDockerbuild' in executingTasks
//}


//println("Executing docker build, ${executeDockerBuild}, ${executingTasks}")
if (isDockerBuild()) {
    ext.profile = getSubConfigValue('docker_profiles', env.toString(), env)
    println("Executing docker build, use profile:${profile}")
}
