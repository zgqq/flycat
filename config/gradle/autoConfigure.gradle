import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()

//if (hasProperty("configKey")) {
//    configObj = data[configKey]
//}

//get_configObj_value(key, env) {
//    if 'env_overwrite' in configObj.keys() and env in data['env_overwrite']:
//    if key in configObj['env_overwrite'][env].keys():
//    return configObj['env_overwrite'][env][key]
//    return configObj[key]
//}

if (!hasProperty("profile")) {
    if (isDockerBuild()) {
        ext.profile = "docker" + profile
    } else {
//        println("Check ${isNativeTask()}")
        if (isNativeTask()) {
            ext.profile = "native" + env
        } else {
            ext.profile = env
        }
    }
}
logger.info("Use ${profile} profile")

def autoConfigMap = new TreeMap<String, String>();
if (getSubConfigValue('infra_redis', 'enable', env)) {
    def host = getSubConfigConnectValue('infra_redis', 'host', env)
    def password = getSubConfigConnectValue('infra_redis', 'password', env)
    def port = getSubConfigConnectValue('infra_redis', 'port', env)

    autoConfigMap.put("flycat.redis.primary.enabled", true)
    autoConfigMap.put("flycat.redis.primary.host", host)
    autoConfigMap.put("flycat.redis.primary.port", port)
    autoConfigMap.put("flycat.redis.primary.password", password)
//    addCustomJvmArgs(["-Dflycat.redis.primary.enabled=true",
//                      "-Dflycat.redis.primary.host=${host}".toString(),
//                      "-Dflycat.redis.primary.port=${port}".toString(),
//                      "-Dflycat.redis.primary.password=${password}".toString()])
}

if (getSubConfigValue('infra_nacos', 'enable', env)) {
    def host = getSubConfigConnectValue('infra_nacos', 'host', env)
    def port = getSubConfigConnectValue('infra_nacos', 'port', env)

    def nacosUser = getSubConfigConnectValue('infra_nacos', 'nacos_user', env)
    def nacosPassword = getSubConfigConnectValue('infra_nacos', 'nacos_password', env)

    autoConfigMap.put("flycat.nacos.config.server-addr", "${host}:${port}".toString())
    autoConfigMap.put("flycat.nacos.config.user", "${nacosUser}".toString())
    autoConfigMap.put("flycat.nacos.config.password", "${nacosPassword}".toString())
//    addCustomJvmArgs(["-Dflycat.nacos.config.server-addr=${host}:${port}".toString(),
//                      "-Dflycat.nacos.config.user=${nacosUser}".toString(),
//                      "-Dflycat.nacos.config.password=${nacosPassword}".toString()
//    ])
}


if (getSubConfigValue('infra_sba', 'enable', env)) {
    def user = getSubConfigConnectValue('infra_sba', 'sba_user', env)
    def password = getSubConfigConnectValue('infra_sba', 'sba_password', env)

    def meta_user = getSubConfigConnectValue('infra_sba', 'meta_user', env)
    def meta_password = getSubConfigConnectValue('infra_sba', 'meta_password', env)
    def client_url = getSubConfigConnectValue('infra_sba', 'client_url', env)

    autoConfigMap.put("spring.security.user.name", user)
    autoConfigMap.put("spring.security.user.password", password)
    autoConfigMap.put("spring.boot.admin.client.username", meta_user)
    autoConfigMap.put("spring.boot.admin.client.password", meta_password)
    autoConfigMap.put("spring.boot.admin.client.metadata.user.name", '${spring.security.user.name}')
    autoConfigMap.put("spring.boot.admin.client.metadata.user.password", '${spring.security.user.password}')

    autoConfigMap.put("spring.boot.admin.client.url", client_url)
//"spring.security.user.name": "zgq",
//"spring.security.user.password": "zgq",
//"spring.boot.admin.client.username": "zgqq",
//"spring.boot.admin.client.password": "zgqq",
//"spring.boot.admin.client.metaconfigObj.user.name": "${spring.security.user.name}",
//"spring.boot.admin.client.metaconfigObj.user.password": "${spring.security.user.password}",
}

if (getConfigValue('router_path', env)) {
    autoConfigMap.put("server.servlet.context-path", getConfigValue('router_path', env))
}


if (getSubConfigValue('infra_mysql', 'enable', env)) {
    def host = getSubConfigConnectValue('infra_mysql', 'host', env)
    def port = getSubConfigConnectValue('infra_mysql', 'port', env)
    def user = getSubConfigConnectValue('infra_mysql', 'user', env)
    def password = getSubConfigConnectValue('infra_mysql', 'password', env)
    def database = getSubConfigConnectValue('infra_mysql', 'database', env)

    autoConfigMap.put("flycat.datasource.primary.enabled", true)
    autoConfigMap.put("flycat.datasource.primary.url", "jdbc:mysql://${host}:${port}/${database}?useUnicode=true&characterEncoding=utf-8".toString())
    autoConfigMap.put("flycat.datasource.primary.username", user)
    autoConfigMap.put("flycat.datasource.primary.password", password)
    autoConfigMap.put("flycat.datasource.primary.initSQL", "SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci")
    autoConfigMap.put("flycat.datasource.primary.driverClassName", "com.mysql.jdbc.Driver")
}


def appPort= getConfigValue('app_port',env)
def appName= getConfigValue('app_name',env)
def dockerRepo= getConfigValue('docker_repo',env)
def mainClass= getConfigValue('main_class',env)

ext.containerPort = appPort
ext.dockerImage = dockerRepo
if (hasProperty('appClassName')) {
    throw new RuntimeException("appClassName has defined")
}
ext.appClassName = mainClass

autoConfigMap.put("server.port", "${appPort}".toString())
autoConfigMap.put("spring.application.name", "${appName}".toString())

//def useProfile = profile
//autoConfigMap.put("spring.profiles.active", "${useProfile}".toString())
if (isProd(env)) {
    autoConfigMap.put("spring.devtools.restart.enabled", false)
} else if(isDockerBuild() || isNativeTask()) {
    autoConfigMap.put("spring.devtools.restart.enabled", false)
}  else if (isLocal(env) || isDev(env)) {
    autoConfigMap.put("spring.devtools.restart.enabled", true)
} else {
    autoConfigMap.put("spring.devtools.restart.enabled", false)
}

ext.debugPort=getConfigValue('debug_port',env, 0)
ext.jmxPort = getConfigValue('jmx_port', env, 0)

if (!isRunUnitTest()) {
    if (!getConfigValue( 'run_test', env)){
        println("Disable test in ${env} env")
        test.enabled = false
    }
}

//"-Xms256m",
//"-Xmx256m",
//"-Xmn128m"
def jvmXmx = getConfigValue('jvm_xmx', env, '256m')
def jvmXms= getConfigValue('jvm_xms', env, '256m')
def jvmXmn= getConfigValue('jvm_xmn', env, '128m')
ext.heapJvmArgs = [
        "-Xms"+jvmXms,
        "-Xmx"+jvmXmx,
        "-Xmn"+jvmXmn
]

//def executeDockerBuild = false
//def executingTasks = project.gradle.startParameter.taskNames
//if (executingTasks != null && !executingTasks.isEmpty()) {
//    executeDockerBuild = 'jib' in executingTasks
//            || 'jibDockerbuild' in executingTasks
//}


//println("Executing docker build, ${executeDockerBuild}, ${executingTasks}")
//if (isDockerBuild()) {
//    ext.profile = getSubConfigValue('docker_profiles', env.toString(), env)
//    println("Executing docker build, use profile:${profile}")
//}


def profilePath = configFileObj.getParent() + "/profile.json"
def config = new File(profilePath)
if (!config.isFile()) {
    println("Not found profile file " + profilePath)
    return
}


def profileConf = jsonSlurper.parse(config)
def handleConf = { configMap, profileConfig ->
    profileConfig.each { key, value ->
        if (key != "env_overwrite") {
            if (key in configMap.keySet()) {
                configMap.remove(key)
            }
            configMap.put(key, value)
//                common += (key + "=" + value +"\n")
        }
    }

    if ("env_overwrite" in profileConfig.keySet()) {
        if (env.toString() in profileConfig['env_overwrite'].keySet()) {
            profileConfig['env_overwrite'][env.toString()].each { skey, svalue ->
                if (skey in configMap.keySet()) {
                    configMap.remove(skey)
                }
                configMap.put(skey, svalue)
            }
        }
    }
}


def configMap = new TreeMap<String, String>(autoConfigMap);
def resourcesDir = sourceSets.main.output.resourcesDir
resourcesDir.mkdirs()

def common = ""
def commonConfig = profileConf['common']
handleConf(configMap, commonConfig)

if (isDockerBuild()) {
    def dockerConfig = profileConf['docker']
    handleConf(configMap, dockerConfig)
}

configMap.each { key, value ->
    common += (key + "=" + value + "\n")
}



println("Handling resource")
println(common)
def applicationConfigFile = new File(resourcesDir, "application-" + profile + ".properties")
println("Write config to file "+ applicationConfigFile.getAbsolutePath())
applicationConfigFile.text = common

//profile_docker
//profile_common
