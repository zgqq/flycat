ssh.settings {
    dryRun = project.hasProperty('dryRun')
    fileTransfer = 'scp'
}

task showPlatformVersion {
    doLast {
        println ssh.version
        ssh.run {
            session(remotes.role('all')) {
                execute 'uname -a'
                execute 'cat /etc/*-release', ignoreError: true
            }
        }
    }
}

def deployServer(serverRole, tarFile) {
    if (remotes.role(serverRole)) {
        ssh.run {
            session(remotes.role(serverRole)) {
                def sdkDir = "/home/${remote.user}/.sdkman/candidates/java/current"
                def deployDir = "/home/${remote.user}/deploy/apps/${project.name}/"
                def releaseDir = "/home/${remote.user}/deploy/releases/"
                def logDir = "/home/${remote.user}/deploy/logs/${project.name}/"
                println "Deploying ${tarFile.absolutePath} to ${remote.user}@${remote.host}:${deployDir}"
                execute "mkdir -p ${deployDir}"
                execute "mkdir -p ${releaseDir}"
                execute "mkdir -p ${logDir}"

                put from: tarFile, into: releaseDir
                ext.fileName = tarFile.name
                ext.dirName = fileName.take(fileName.lastIndexOf('.'))

                def javaHome = execute """
                           echo \$JAVA_HOME
                """
                println "Java home $javaHome"

                execute """
                        cd ${releaseDir} && tar xf ${tarFile.name} -C ${deployDir} 
                """

                execute """
                        cd ${deployDir} && rm -f current && ln -s ${dirName} current 
                """

                def result = execute """
                        if [ -z \$JAVA_HOME]; then 
                                export JAVA_HOME="$sdkDir"
                        fi
                        cd ${deployDir} && nohup ${dirName}/bin/${project.name} 2>&1 1>>${project.name}.out.log &
                        """
                println "Execute result ${result}"
            }
        }
    } else {
        println "Nothing to do, not found any ${serverRole} server."
    }
}

task deploy {
    dependsOn 'distTar'
    doLast {
        def serverRole = 'all'
        if (hasProperty("env") && ext.env != 'default') {
            serverRole = ext.env
        }
        deployServer(serverRole, distTar.archiveFile.get().asFile)
    }
}

