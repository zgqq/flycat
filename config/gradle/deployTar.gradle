ssh.settings {
    dryRun = project.hasProperty('dryRun')
    fileTransfer = 'scp'
}

task showPlatformVersion {
    doLast {
        println ssh.version
        ssh.run {
            session(remotes.role('all')) {
                execute 'uname -a'
                execute 'cat /etc/*-release', ignoreError: true
            }
        }
    }
}

def deployServer(serverRole, tarFile) {
    if (remotes.role(serverRole)) {
        ssh.run {
            session(remotes.role(serverRole)) {
                def sdkDir = "/home/${remote.user}/.sdkman/candidates/java/current"
                def deployDir = "/home/${remote.user}/deploy/apps/${project.name}/"
                def releaseDir = "/home/${remote.user}/deploy/releases/"
                def logDir = "/home/${remote.user}/deploy/logs/${project.name}/"
                println "Deploying ${tarFile.absolutePath} to ${remote.user}@${remote.host}:${deployDir}"
                execute "mkdir -p ${deployDir}"
                execute "mkdir -p ${releaseDir}"
                execute "mkdir -p ${logDir}"

                put from: tarFile, into: releaseDir
                ext.fileName = tarFile.name
                ext.dirName = fileName.take(fileName.lastIndexOf('.'))

                def javaHome = execute """
                           echo \$JAVA_HOME
                """
                println "Java home $javaHome"

                execute """
                        cd ${releaseDir} && tar xf ${tarFile.name} -C ${deployDir} 
                """

                execute """
                        cd ${deployDir} && rm -f current && ln -s ${dirName} current 
                """

                def result = execute """
                        if [ -z \$JAVA_HOME]; then 
                                export JAVA_HOME="$sdkDir"
                        fi
                        cd ${deployDir} && nohup ${dirName}/bin/${project.name} 2>&1 1>>${project.name}.out.log &
                        """
                println "Execute result ${result}"
            }
        }
    } else {
        println "Nothing to do, not found any ${serverRole} server."
    }
}


task deployTest() {
    dependsOn 'distTar'
    setTestEnv()
    doLast {
        deployServer('test', distTar.archiveFile.get().asFile)
    }
}

def setTestEnv() {
    println "Setting env, before: ${ext.env}, after: test"
    ext.env = "test"
}

def setProductionEnv() {
    println "Setting env, before: ${ext.env}, after: production"
    ext.env = "production"
}

task deployProduction {
    dependsOn 'distTar'
    setProductionEnv()
    doLast {
        deployServer('production', distTar.archiveFile.get().asFile)
    }
}

task deploy {
    dependsOn 'deployProduction'
}

def addServer(serverIp,
              serverUser,
              serverRole) {
    println "Adding server, ip:${serverIp}, user:${serverUser}, role:${serverRole}"
    remotes {
        "${serverIp}" {
            role("${serverRole}")
            role("all")
            host = "${serverIp}"
            user = "${serverUser}"
            identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        }
    }
}

def addTestServer(serverIp,
                  serverUser) {
    addServer(serverIp, serverUser, 'test')
}

def addProductionServer(serverIp,
                        serverUser) {
    addServer(serverIp, serverUser, 'production')
}

ext {
    addTestServer = this.&addTestServer
    addProductionServer = this.&addProductionServer
    addServer = this.&addServer
}

