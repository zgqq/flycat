import java.text.SimpleDateFormat


configurations {
    // replaced with jcl-over-slf4j
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    // replaced with log4j-over-slf4j
    all*.exclude group: 'log4j', module: 'log4j'
//    compile.exclude module: "spring-boot-starter-tomcat"
//    developmentOnly
//    runtimeClasspath {
//        extendsFrom developmentOnly
//    }
}

//apply plugin: 'io.spring.dependency-management'
//apply plugin: 'org.springframework.boot'




dependencies {
    if (!isProd(env)) {
        developmentOnly("org.springframework.boot:spring-boot-devtools")
    }
}

//        testImplementation "org.springframework:spring-test"
//        testImplementation "org.springframework.boot:spring-boot-test"
    // testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    // testImplementation group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc'
    // testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
//}

if (!isStartupOrPackage()) {
    logger.info("Not startup or package task, disable auto configure")
    return
}

//if (ignoredEnv) {
//    return
//}


//def useProfile = profile

apply plugin: "java"
apply plugin: 'application'
//apply from: "${gradleConfigDir}/tasks.gradle"
//processResources.dependsOn copyConfiguration



if (hasProperty("tag")) {
    ext.tag = "-" + tag
} else {
    ext.tag = ""
}

apply from: "${gradleConfigDir}/git.gradle"
println "Current branch name ${currentBranch}, latest git hash ${latestGitHash}, commit time ${latestGitDate}"
ext.gitVersionInfo = "git_${currentBranch}_${latestGitDate}_${latestGitHash}"

version = env + tag + '-' + gitVersionInfo
if (isProd(env)) {
    version += '-pkg_' + (new Date().format("yyyyMMdd_HHmmss"))
}
//version = '0.0.1-SNAPSHOT'


if (hasProperty("appClassName")) {
    println "Current main class name: ${mainClassName}, appClassName: ${appClassName}"
    mainClassName = ext.appClassName
}


//def depType = ""
//if (hasProperty("deployType")) {
//    depType=deployType
//}
//def profile = ${depType}${env}

//ext.appRunArgs = []

//ext.springJvmArgs = ["-Dspring.profiles.active=${useProfile}".toString()]
//if (isProd(env)) {
//    ext.appJvmArgs += ['-Dspring.devtools.restart.enabled=false']
//} else if(isDockerBuild() || isNativeBuild()) {
//    ext.appJvmArgs += [
//            '-Dspring.devtools.restart.enabled=false']
//}  else if (isTest(env) || isDev(env)) {
//    ext.appJvmArgs += [
//            '-Dspring.devtools.restart.enabled=true']
//} else {
//    if (useDcevm) {
//        ext.appJvmArgs += [
//                '-Dspring.devtools.restart.enabled=false']
//    }
//}

def vJavaVersion = vJavaLang as double
if (vJavaLang.contains(".")) {
    vJavaVersion = vJavaLang.split(".")
}

def useProfile = profile
ext.springJvmArgs = ["-Dspring.profiles.active=${useProfile}".toString()]
//System.setProperty("spring.profiles.active", useProfile.toString())

if (vJavaVersion > 8) {
    ext.appJvmArgs = ext.springJvmArgs + [
            '-Dfile.encoding=UTF-8',
            "-Xlog:gc*",
            "-XX:-OmitStackTraceInFastThrow"]
} else {
    ext.appJvmArgs = ext.springJvmArgs + [
            '-Dfile.encoding=UTF-8',
            "-XX:+PrintGCDetails",
            "-XX:+PrintGCTimeStamps",
            "-XX:-OmitStackTraceInFastThrow"]
}

ext.useDcevm = false
ext.isDevEnv = (!isProd(env) && !isTest(env))

if (!isProd(env) && !isTest(env) && hasProperty("hotswapAgentPath")) {
    ext.appJvmArgs += ['-XXaltjvm=dcevm',
                       "-javaagent:${hotswapAgentPath}=autoHotswap=true".toString()]
    ext.useDcevm = true
}


ext.appJvmArgs += ["-XX:+IgnoreUnrecognizedVMOptions"]




ext.appJvmArgs += [
        // openj9
        // SharedCacheHardLimit > Xscmx >Xscmaxaot
        '-XX:SharedCacheHardLimit=250m'
        , '-Xscmx200m'
        , '-Xscmaxaot60m'
        , '-Xshareclasses'
]

if (!isProd(env)) {
    ext.appJvmArgs += [
            '-noverify'
            , '-XX:TieredStopAtLevel=1'
            , '-XX:+AlwaysPreTouch'
    ]

    ext.appJvmArgs += [
            // openj9
            // SharedCacheHardLimit > Xscmx >Xscmaxaot
            '-Xquickstart'

//            '-Djava.compiler=NONE'
//            , '-Xnoaot'
//            , '-Xnojit'
    ]

}


//ext.debugServerPort = '5005'
//if (hasProperty("debugPort")) {
//    ext.debugServerPort = "$debugPort"
//}

//if (isTest(env)) {
//    before java v5 not work on openj9
//    ext.appJvmArgs += ["-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=0.0.0.0:${ext.debugServerPort}, server=y,suspend=n".toString()]
//    after java8 allow remote and local
//    ext.appJvmArgs += ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005']
//    ext.appJvmArgs += ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005']
//}


if (hasProperty('debugPort') && debugPort > 0) {
    ext.appJvmArgs += ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:${debugPort}".toString()]
}


if (hasProperty('jmxPort') && jmxPort > 0) {
    ext.frJvmArgs = ["-Dcom.sun.management.jmxremote=true",
                     "-Dcom.sun.management.jmxremote.port=${jmxPort}".toString(),
                     "-Dcom.sun.management.jmxremote.rmi.port=${jmxPort}".toString(),
                     "-Dcom.sun.management.jmxremote.authenticate=false",
                     "-Dcom.sun.management.jmxremote.ssl=false",
                     "-Djava.rmi.server.hostname=localhost",
                     "-Dcom.sun.management.jmxremote.local.only=false",
//                     "-XX:+UnlockCommercialFeatures", // To open flight recorder in java8
//                     "-XX:+FlightRecorder",
//                     "-XX:+UnlockDiagnosticVMOptions",
//                     "-XX:+DebugNonSafepoints"
    ]
    ext.appJvmArgs += ext.frJvmArgs
}

ext.gcLog = "gc.log"
ext.errorLog = "hs_err_pid%p.log"

ext.appJvmArgs += ["-XX:+HeapDumpOnOutOfMemoryError"]
ext.appJvmArgs += [
        '-Djdk.attach.allowAttachSelf=true'
]


if (isTest(env)) {
    // small loss in throughput, less cpu and less memory footprint
    ext.appJvmArgs += ['-Xtune:virtualized']
}


if (isDockerBuild()) {
    // need to create it ahead of time
    ext.logPath = "/userapp/logs"
//    ext.logPath = "."
    ext.gcLog = "${logPath}/gc.log".toString()
    ext.errorLog = "${logPath}/hs_err_pid%p.log".toString()
    ext.appJvmArgs += ["-Djava.library.path=/usr/local/tomcat/lib/native-jni-lib",
                       "-Duser.timezone=Asia/Shanghai",
                       "-XX:HeapDumpPath=${logPath}/dump.hprof".toString()
    ]
}


if (hasProperty('jfrConfig')) {
    ext.appJvmArgs += ["-XX:+UnlockCommercialFeatures",
                       "-XX:+FlightRecorder",
                      ]
    if ('maxage' in jfrConfig.keySet()) {
        ext.appJvmArgs += ["-XX:StartFlightRecording.disk=true,maxage=${jfrConfig['maxage']},settings=default".toString(),
                "-XX:FlightRecorderOptions=repository=${jfrConfig['repo']}".toString()
        ]
    } else {
        ext.appJvmArgs += ["-XX:StartFlightRecording=duration=${jfrConfig['duration']},filename=${jfrConfig['filename']}".toString()]
    }
}

if (!hasProperty('heapJvmArgs')) {
    ext.heapJvmArgs = []
//    if (isTest(env)) {
    heapJvmArgs += [
            "-Xms256m",
            "-Xmx256m",
            "-Xmn128m"
    ]
//    }
}
appJvmArgs += heapJvmArgs


if (vJavaVersion >= 17) {
    appJvmArgs += [
            "-XX:ErrorFile=${errorLog}".toString(),
//            "-Xlog:gc:${gcLog}".toString(),
            "-Dapp.version=" + version,
            "-Dapp.git.diff=${gitDiffNameStatus}".toString()
    ]
} else {
    appJvmArgs += [
            "-XX:ErrorFile=${errorLog}".toString(),
//            "-Xloggc:${gcLog}".toString(),
            "-Dapp.version=" + version,
            "-Dapp.git.diff=${gitDiffNameStatus}".toString()
    ]
}

if (hasProperty('customJvmArgs')) {
    appJvmArgs += customJvmArgs
    println 'Custom jvm args: ' + customJvmArgs.join(",")
}

applicationDefaultJvmArgs = appJvmArgs


println 'Run java home:' + System.properties['java.home']
println 'App jvm args: ' + applicationDefaultJvmArgs.join(",")


//if (project.hasProperty("args")) {
//    println "Our input argument with project property ["+project.getProperty("args")+"]"
//}




//defaultTasks 'compileJava', 'checkStyle'


//// disable to fix distTar(not copy app self jar)
jar.enabled = true
//bootJar.enabled = true

distZip.enabled = false
bootDistTar.enabled = false
bootDistZip.enabled = false

if (!isDockerBuild())
    distTar.enabled = true
else
    distTar.enabled = false

if (isDev) {
    distTar.enabled = false
}


//bootJar.enabled = true
//bootJar {
//    archiveClassifier = ''
//}

bootRun {
    classpath += files("${System.properties['java.home']}/../lib/tools.jar".toString())
    systemProperties = System.properties
    setAllJvmArgs(appJvmArgs)
}

if (tasks.findByName("processAot")!=null) {
    tasks.named("processAot") {
        setAllJvmArgs(appJvmArgs)
    }
}

if (hasProperty("mainClassName") && mainClassName != null) {
    println "Main class: $mainClassName"
    startScripts {
        mainClassName = "$mainClassName"
        doLast {
            unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$JAVA_HOME/lib/tools.jar:$APP_HOME')
            windowsScript.text = windowsScript.text.replace('set CLASSPATH=%APP_HOME%',
                    'set CLASSPATH=%JAVA_HOME%\\lib\\tools.jar;%APP_HOME%'
            )
        }
    }
}

if (distTar.enabled) {
    println 'distTar path:' + distTar.archiveFile.get()
}



