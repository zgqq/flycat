def serverConfig = {};

def addServer(serverIp,
              serverUser,
              serverRole) {
    if (ignoredEnv) {
        return
    }
    println "Adding server, ip:${serverIp}, user:${serverUser}, role:${serverRole}"
    remotes {
        "${serverIp}" {
            role("${serverRole}")
            role("all")
            host = "${serverIp}"
            user = "${serverUser}"
            identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        }
    }
}

def addTestServer(serverIp,
                  serverUser) {
    addServer(serverIp, serverUser, 'test')
}

def addProductionServer(serverIp,
                        serverUser) {
    addServer(serverIp, serverUser, 'production')
}

def execCmd = { command ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine command
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task updateServerClasses() {
    dependsOn 'updateClassesFiles'
    doLast {

        def output = execCmd(['rsync', '--progress', '--itemize-changes',
                              '--human-readable', '--checksum',
                              '--size-only', '--delete', '-ru',
                              "/tmp/java-app-classes/${project.name}/.".toString(),
                              "${server}:~/deploy/docker-container/${project.name}/current/app".toString()
        ])
        println output
    }
}


ext {
    addTestServer = this.&addTestServer
    addProductionServer = this.&addProductionServer
    addServer = this.&addServer
}

