import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper()

def configFile = "./config.json"
if (hasProperty("config")) {
    configFile = config
}

def fileObj = new File(configFile)
if (!fileObj.isFile()) {
    throw new RuntimeException("Not found config file " + configFile)
    return
}

def data = jsonSlurper.parse(fileObj)
ext.configObj = data
ext.configFileObj = fileObj

logger.debug("Read config: ${configObj}")
//rootProject.name = configObj['app_name']


ext.getConfigValue = { key, env, defaultValue = null ->
    if ('modules' in configObj.keySet()) {
        if (project.name in configObj['modules'].keySet()) {
            def configValue = getConfigValueFromObject(configObj['modules'][project.name], key, env, null)
            if (configValue != null) {
                logger.debug("getConfigValue by modules, ${key}, ${env}, ${defaultValue}, return ${configValue}")
                return configValue
            }
        }
    }
    def returnValue = getConfigValueFromObject(configObj, key, env, defaultValue)
    logger.debug("getConfigValue, ${key}, ${env}, ${defaultValue}, return ${returnValue}")
    return returnValue
}


ext.getConfigValueFromObject = { configData, key, env, defaultValue = null ->
    env = env.toString()
    // Method body here
    logger.debug("getConfigValueFromObject ${key}, ${env}")
    if ('env_overwrite' in configData.keySet() && configData['env_overwrite'].containsKey(env)) {
        if (key in configData['env_overwrite'][env].keySet()) {
            logger.debug("getConfigValueFromObject ${key}, ${env}, return by env config ${configData['env_overwrite'][env][key]}")
            return configData['env_overwrite'][env][key]
        }
    }

    logger.debug("getConfigValueFromObject check key, ${key}, ${configData.keySet()}")
    if (key in configData.keySet()) {
        logger.debug("getConfigValueFromObject ${key}, ${env}, return by main config ${configData[key]}")
        return configData[key]
    }
    logger.debug("getConfigValueFromObject ${key}, ${env}, return ${defaultValue}")
    return defaultValue
}


ext.getConfigConnectValue = { configData, key, env, defaultValue = null ->
    env = env.toString()
    def connectKey
    if (isSkaffoldBuild()){
        connectKey = env + "_k8s"
    } else if (isBuildImage()) {
        connectKey = env + "_docker"
    } else if (isStartupOrPackagingExcludingImageBuild()){
        connectKey = env + "_baremetal"
    } else {
        connectKey = env 
    }
    // Method body here
    if ('connected' in configData.keySet() && configData['connected'].containsKey(connectKey)) {
        if (key in configData['connected'][connectKey].keySet()) {
            logger.debug("getConfigConnectValue from env, ${key}, ${connectKey}, ${configData['connected'][connectKey][key]}")
            return configData['connected'][connectKey][key]
        }
    }
    if ('common' in configData['connected'].keySet() && key in configData['connected']['common'].keySet()) {
        logger.debug("getConfigConnectValue from common, ${key}, ${env}, ${configData['connected']['common'][key]}")
        return configData['connected']['common'][key]
    }
    if (connectKey in configData.keySet()) {
        logger.debug("getConfigConnectValue from main, ${key}, ${connectKey}, ${configData[connectKey]}")
        return configData[connectKey]
    }
    return getConfigValueFromObject(configData, key, env, defaultValue)
}

ext.getSubConfigConnectValue = { name, key, env, defaultValue = null ->
    if ('modules' in configObj.keySet()) {
        if (project.name in configObj['modules'].keySet()) {
            def configValue = getSubConfigConnectValueFromObject(configObj['modules'][project.name], name, key, env, null)
            if (configValue != null) {
                return configValue
            }
        }
    }
    return getSubConfigConnectValueFromObject(configObj, name, key, env, defaultValue)
}



ext.getSubConfigConnectValueFromObject = {configObject, name, key, env, defaultValue = null ->
    env = env.toString()
    logger.debug("getSubConfigConnectValue ${name}, ${key}, ${env} ")
    if (name in configObject.keySet()) {
        def configData = configObject[name]
        return getConfigConnectValue(configData, key, env, defaultValue)
    }
    return defaultValue
}

ext.getSubConfigValue = { name, key, env, defaultValue = null ->
    env = env.toString()
    logger.debug("getSubConfigValue ${name}, ${key}, ${env} ")
    if (name in configObj.keySet()) {
        def configData = configObj[name]
//        def arr = ['local', 'dev']
//        println("get env_overwrite ${name}, ${key}, env:${env}, ${configData['env_overwrite'].keySet()}," +
//                "${'env_overwrite' in configData.keySet()},env in env_overwrite:${env.toString() in configData['env_overwrite'].keySet()}, " +
//                "${'local' in arr}, ${arr}, ss${configData['env_overwrite'].containsKey(env)}")
        return getConfigValueFromObject(configData, key, env, defaultValue)
    }
    return defaultValue
}


ext.getSubOrMainConfigValue = { name, key, env, defaultValue = null ->
    env = env.toString()
    logger.debug("getSubConfigValue ${name}, ${key}, ${env} ")
    if (name in configObj.keySet()) {
        def configData = configObj[name]
//        def arr = ['local', 'dev']
//        println("get env_overwrite ${name}, ${key}, env:${env}, ${configData['env_overwrite'].keySet()}," +
//                "${'env_overwrite' in configData.keySet()},env in env_overwrite:${env.toString() in configData['env_overwrite'].keySet()}, " +
//                "${'local' in arr}, ${arr}, ss${configData['env_overwrite'].containsKey(env)}")
        def returnValue = getConfigValueFromObject(configData, key, env, defaultValue)
        if (defaultValue !== returnValue) {
            return returnValue
        }
    }
    return getConfigValueFromObject(configObj, key, env, defaultValue)
}

ext.addCustomJvmArgs = { argsArr ->
    if (project.hasProperty('customJvmArgs')) {
        ext.customJvmArgs += argsArr
    } else {
        ext.customJvmArgs = argsArr
    }
}
