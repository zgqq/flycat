import java.text.SimpleDateFormat

def execCmd = { command ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine command
        standardOutput = stdout
    }
    return stdout.toString().trim()
}


def execCmdWithRawOut = { command ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine command
        standardOutput = stdout
    }
    return stdout.toString()
}


def getGitHash = { ->
    return execCmd(['git', 'rev-parse', '--short', 'HEAD'])
}

// git rev-parse --abbrev-ref HEAD
def getBranchName = { ->
    return execCmd(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])
}

def getGitDate = { ->
    def logDate = execCmd(['git', 'log', '-1', '--format=%cd'])
    SimpleDateFormat parser = new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy");
    Date date = parser.parse(logDate);
    SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd_HHmmss");
    return formatter.format(date);
}

def diffFile = execCmdWithRawOut(['git', 'diff', 'HEAD', '--name-status'])
if (diffFile == null || diffFile.trim().isEmpty()) {
    diffFile = execCmdWithRawOut(['git', 'diff', 'HEAD^', 'HEAD', '--name-status'])
}

def createRepoChangeFile = { ->
    def diff = execCmdWithRawOut(['git', 'diff', 'HEAD', '--color'])
    if (diff == null || diff.trim().isEmpty()) {
        diff = execCmdWithRawOut(['git', 'diff', 'HEAD^', 'HEAD', '--color'])
    }

    def directoryName = "${buildDir}/build/generated/git"
    File directory = new File(directoryName);
    if (! directory.exists()){
        directory.mkdirs();
    }

    new File("${directoryName}/git-diff").withWriter { out ->
        out.write(diff)
    }

    new File("${directoryName}/git-diff-files").withWriter { out ->
        out.write(diffFile)
    }
}

ext.latestGitHash = getGitHash()
ext.latestGitDate = getGitDate()
ext.currentBranch = getBranchName()
createRepoChangeFile()

ext.gitDiffNameStatus = diffFile

//ext {
//    createRepoChangeFile = this.&createRepoChangeFile
//}

