apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: "java"
apply plugin: 'application'
apply from: "${gradleConfigDir}/tasks.gradle"
processResources.dependsOn copyConfiguration

ext.springJvmArgs = ["-Dspring.profiles.active=$env".toString()]

if (vJavaLang == '1.11') {
    ext.appJvmArgs = ext.springJvmArgs + [
            '-Dfile.encoding=UTF-8',
            "-Xlog:gc*",
            "-XX:-OmitStackTraceInFastThrow"]
} else {
    ext.appJvmArgs = ext.springJvmArgs + [
            '-Dfile.encoding=UTF-8',
            "-XX:+PrintGCDetails",
            "-XX:+PrintGCTimeStamps",
            "-XX:-OmitStackTraceInFastThrow"]
}


if (!isProd(env)) {
    ext.appJvmArgs += ['-noverify'
                       , '-XX:TieredStopAtLevel=1'
                       , '-XX:+AlwaysPreTouch']

    ext.frJvmArgs = ["-Dcom.sun.management.jmxremote=true",
                     "-Dcom.sun.management.jmxremote.port=7091",
                     "-Dcom.sun.management.jmxremote.rmi.port=7091",
                     "-Dcom.sun.management.jmxremote.authenticate=false",
                     "-Dcom.sun.management.jmxremote.ssl=false",
                     "-XX:+UnlockCommercialFeatures",
                     "-XX:+FlightRecorder",
                     "-XX:+UnlockDiagnosticVMOptions",
                     "-XX:+DebugNonSafepoints"
    ]
    ext.appJvmArgs += ext.frJvmArgs
}


ext.debugServerPort = 5005
if (hasProperty("debugPort")) {
    ext.debugServerPort = "$debugPort"
}

if (isTestServer(env)) {
    ext.appJvmArgs += ["-Xdebug",
                       "-Xnoagent",
                       '-Djava.compiler=NONE',
                       """-Xrunjdwp:transport=dt_socket,address=${ext.debugServerPort},
server=y,suspend=n""".toString()]

}


//AVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote=true"
//JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port=7091"
//JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.rmi.port=7091"
//JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=false"
//JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false"
//JAVA_OPTS="$JAVA_OPTS -XX:+UnlockCommercialFeatures"
//JAVA_OPTS="$JAVA_OPTS -XX:+FlightRecorder"


applicationDefaultJvmArgs = appJvmArgs + [
        "-Xms512m",
        "-Xmx512m",
        "-Xmn128m",
        "-Xloggc:$projectDir/data/log/gc.log".toString()
]


version = env
if (isProd(env)) {
    version += '-' + (new Date().format("yyyyMMdd_HHmmss"))
}


defaultTasks 'compileJava', 'checkStyle'

distZip.enabled = false
distTar.enabled = false
//bootDistTar.enabled = false
bootDistZip.enabled = false

//    processResources.dependsOn copyConfiguration


configurations {
    // replaced with jcl-over-slf4j
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    // replaced with log4j-over-slf4j
    all*.exclude group: 'log4j', module: 'log4j'
//    compile.exclude module: "spring-boot-starter-tomcat"
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}


dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")

//        testCompile "org.springframework:spring-test"
//        testCompile "org.springframework.boot:spring-boot-test"
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc'
}

bootJar {
    archiveClassifier = 'boot'
}


bootRun {
    systemProperties = System.properties
}

test.enabled = false

startScripts {
    mainClassName = "$mainClassName"
}
