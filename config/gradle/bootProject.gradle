apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: "java"
apply plugin: 'application'
apply from: "${gradleConfigDir}/tasks.gradle"
processResources.dependsOn copyConfiguration

if (hasProperty("appClassName")) {
    println "Current main class name: ${mainClassName}, appClassName: ${appClassName}"
    mainClassName = ext.appClassName
}

ext.springJvmArgs = ["-Dspring.profiles.active=${ext.env}".toString()]

if (vJavaLang == '1.11') {
    ext.appJvmArgs = ext.springJvmArgs + [
            '-Dfile.encoding=UTF-8',
            "-Xlog:gc*",
            "-XX:-OmitStackTraceInFastThrow"]
} else {
    ext.appJvmArgs = ext.springJvmArgs + [
            '-Dfile.encoding=UTF-8',
            "-XX:+PrintGCDetails",
            "-XX:+PrintGCTimeStamps",
            "-XX:-OmitStackTraceInFastThrow"]
}

if (!isProd(env)) {
    ext.appJvmArgs += ['-noverify'
                       , '-XX:TieredStopAtLevel=1'
                       , '-XX:+AlwaysPreTouch']

}


ext.debugServerPort = 5005
if (hasProperty("debugPort")) {
    ext.debugServerPort = "$debugPort"
}

if (isTestServer(env)) {
    ext.appJvmArgs += ["-Xdebug",
                       "-Xnoagent",
                       '-Djava.compiler=NONE',
                       "-Xrunjdwp:transport=dt_socket,address=${ext.debugServerPort}, server=y,suspend=n".toString()]

}

ext.useDcevm = false

ext.isDevEnv = (!isProd(env) && !isTestServer(env))

if (!isProd(env) && !isTestServer(env) && hasProperty("hotswapAgentPath")) {
    ext.appJvmArgs += ['-XXaltjvm=dcevm',
                       "-javaagent:${hotswapAgentPath}=autoHotswap=true".toString()]
    ext.useDcevm = true
}


if (!isProd(env) && !useDcevm) {
    ext.frJvmArgs = ["-Dcom.sun.management.jmxremote=true",
                     "-Dcom.sun.management.jmxremote.port=7091",
                     "-Dcom.sun.management.jmxremote.rmi.port=7091",
                     "-Dcom.sun.management.jmxremote.authenticate=false",
                     "-Dcom.sun.management.jmxremote.ssl=false",
                     "-XX:+UnlockCommercialFeatures",
                     "-XX:+FlightRecorder",
                     "-XX:+UnlockDiagnosticVMOptions",
                     "-XX:+DebugNonSafepoints"
    ]
    ext.appJvmArgs += ext.frJvmArgs
}

if (!isDevEnv) {
    ext.appJvmArgs += ["-XX:-IgnoreUnrecognizedVMOptions",
                       '-Dspring.devtools.restart.enabled=false']
}

ext.gcLog = "gc.log"
ext.errorLog = "hs_err_pid%p.log"

if (isDocker(env)) {
    ext.gcLog = "/app/data/logs/gc.log"
    ext.errorLog = "/app/data/logs/hs_err_pid%p.log"
}

applicationDefaultJvmArgs = appJvmArgs + [
        "-Xms512m",
        "-Xmx512m",
        "-Xmn128m",
        "-XX:ErrorFile=${errorLog}".toString(),
        "-Xloggc:${gcLog}".toString()
]

println 'Run java home:' + System.properties['java.home']
println 'App jvm args: ' + applicationDefaultJvmArgs.join(",")

if (!hasProperty("tag")) {
    ext.tag = "default"
}


version = env + '-' + tag
if (isProd(env)) {
    version += '-' + (new Date().format("yyyyMMdd_HHmmss"))
}


//defaultTasks 'compileJava', 'checkStyle'


// disable to fix distTar(not copy app self jar)
jar.enabled = true
bootJar.enabled = false


distZip.enabled = false
bootDistTar.enabled = false
bootDistZip.enabled = false

if (!isDocker(env))
    distTar.enabled = true

//    processResources.dependsOn copyConfiguration


configurations {
    // replaced with jcl-over-slf4j
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    // replaced with log4j-over-slf4j
    all*.exclude group: 'log4j', module: 'log4j'
//    compile.exclude module: "spring-boot-starter-tomcat"
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}


dependencies {
    if (isDevEnv) {
        developmentOnly("org.springframework.boot:spring-boot-devtools")
    }

//        testCompile "org.springframework:spring-test"
//        testCompile "org.springframework.boot:spring-boot-test"
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc'
}


bootJar {
    archiveClassifier = 'boot'
}


bootRun {
    classpath += files("${System.properties['java.home']}/../lib/tools.jar".toString())
    systemProperties = System.properties
}

test.enabled = false

if (hasProperty("mainClassName") && mainClassName != null) {
    println "Main class: $mainClassName"
    startScripts {
        mainClassName = "$mainClassName"
        doLast {
            unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$JAVA_HOME/lib/tools.jar:$APP_HOME')
            windowsScript.text = windowsScript.text.replace('set CLASSPATH=%APP_HOME%',
                    'set CLASSPATH=%JAVA_HOME%\\lib\\tools.jar;%APP_HOME%'
            )
        }
    }
}

println 'distTar path:' + distTar.archiveFile.get()


