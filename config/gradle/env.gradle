ext.environment = "local"
if (hasProperty("env")) {
    ext.environment = "$env"
}

ext.env = ext.environment
ext.isProd = { env ->
//    return "prod".equals(env.toString()) || "production".equals(env.toString()) ||
//            "product".equals(env.toString())
    return env.toString().contains("prod")
}

ext.isTest = { env ->
    return env.toString().contains("test")
//    return "test".equals() || "testdocker".equals(env.toString())
}

//ext.isDocker = {
//    env -> return env.toString().contains("docker")
//}


ext.isRunTask = { tasks ->
    def executingTasks = project.gradle.startParameter.taskNames
    if (executingTasks != null && !executingTasks.isEmpty()) {
        for(item in tasks) {
            if (item in executingTasks) {
                return true
            }
        }
    }
    return false
}

ext.isDockerBuild = {
//    def executeDockerBuild = false
//    def executingTasks = project.gradle.startParameter.taskNames
//    if (executingTasks != null && !executingTasks.isEmpty()) {
//        executeDockerBuild = 'jib' in executingTasks
//                || 'jibDockerbuild' in executingTasks
//    }
//    return executeDockerBuild
    return isRunTask(['jib', 'jibDockerbuild'])
}

ext.isRunUnitTest = {
//    def executeDockerBuild = false
//    def executingTasks = project.gradle.startParameter.taskNames
//    if (executingTasks != null && !executingTasks.isEmpty()) {
//        executeDockerBuild = 'jib' in executingTasks
//                || 'jibDockerbuild' in executingTasks
//    }
//    return executeDockerBuild
    return isRunTask(['test', ':test'])
}


ext.isDev = {
    return !isProd(env) && !isTest(env)
}


ext.ignoredEnv = false
def executingTasks = project.gradle.startParameter.taskNames
if (executingTasks == null || executingTasks.isEmpty()
        || 'classes' in executingTasks
        || 'compileJava' in executingTasks) {
    ignoredEnv = true
}


//if (executingTasks == null || executingTasks.isEmpty()
//        || 'jib' in executingTasks
//        || 'jibDockerbuild' in executingTasks) {
//    if (!hasProperty("deployType")) {
//        throw new java.lang.RuntimeException("Need deployType arguments")
//    }
//}

println "Executing ${project.gradle.startParameter.taskNames}, ignoredEnv $ignoredEnv"

