ext.environment = "local"
if (hasProperty("env")) {
    ext.environment = "$env"
}

ext.env = ext.environment
ext.isProd = { env ->
//    return "prod".equals(env.toString()) || "production".equals(env.toString()) ||
//            "product".equals(env.toString())
    return env.toString().contains("prod")
}

ext.isTest = { env ->
    return env.toString().contains("test")
//    return "test".equals() || "testdocker".equals(env.toString())
}


ext.isLocal = { env ->
    return env.toString().contains("local")
//    return "test".equals() || "testdocker".equals(env.toString())
}


//ext.isDocker = {
//    env -> return env.toString().contains("docker")
//}


ext.isRunTask = { tasks ->
    def executingTasks = project.gradle.startParameter.taskNames
    if (executingTasks != null && !executingTasks.isEmpty()) {
        for(item in tasks) {
            logger.debug("${item} ${executingTasks}")
            for (execTask in executingTasks) {
                if (execTask.endsWith(item)) {
                    return true
                }
            }
        }
    }
    return false
}

ext.isDockerBuild = {
//    return isRunTask(['jib', 'jibDockerBuild', 'buildLocalImages'])
    return isJibDockerBuild() || isRunTask(['bootBuildImage'])
}


ext.isJibDockerBuild = {
    return isRunTask(['jib', 'jibDockerBuild', 'buildLocalImage',
                      'buildLocalImages',
                      'buildRegistryImage',
                      'buildRegistryImages',
    ])
}


//processAot
ext.isNativeTask = {
//    return isRunTask(['nativeCompile', 'processAot', 'bootBuildImage'])
    return isRunTask(['nativeCompile', 'processAot'])
}


ext.isTestTask = { env ->
    return isRunTask(['test'])
}


ext.isRunUnitTest = {
//    def executeDockerBuild = false
//    def executingTasks = project.gradle.startParameter.taskNames
//    if (executingTasks != null && !executingTasks.isEmpty()) {
//        executeDockerBuild = 'jib' in executingTasks
//                || 'jibDockerBuild' in executingTasks
//    }
//    return executeDockerBuild
    return isRunTask(['test'])
}


ext.isDev = {
    return !isProd(env) && !isTest(env)
}

ext.ignoredEnv = {
    return isRunTask(['classes', 'compileJava', 'test'])
}

//ext.ignoredEnv = false
//def executingTasks = project.gradle.startParameter.taskNames
//if (executingTasks == null || executingTasks.isEmpty()
//        || 'classes' in executingTasks
//        || 'compileJava' in executingTasks
//) {
//    ignoredEnv = true
//}


ext.isStartupOrPackage = {
//    return isRunTask(['bootRun', 'jib', 'jibDockerBuild','buildLocalImages'])
    return isRunTask(['nativeCompile']) || isRunTask(['bootRun']) || isDockerBuild()
}


ext.isStartupFromCode = {
    return isRunTask(['bootRun'])
}

ext.isStartupFromDocker = {
    return isDockerBuild()
}

//if (executingTasks == null || executingTasks.isEmpty()
//        || 'jib' in executingTasks
//        || 'jibDockerBuild' in executingTasks) {
//    if (!hasProperty("deployType")) {
//        throw new java.lang.RuntimeException("Need deployType arguments")
//    }
//}

if (!hasProperty("profile")) {
    if (isDockerBuild()) {
        ext.profile = "docker" + env
    } else {
//        println("Check ${isNativeTask()}")
        if (isNativeTask()) {
            ext.profile = "native" + env
        } else {
            ext.profile = env
        }
    }
}
logger.info("Use ${profile} profile")

println "Executing ${project.gradle.startParameter.taskNames}, ignoredEnv ${ignoredEnv()}"

