apply plugin: "java"
apply plugin: "java-library"

dependencies {
//    api group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

    api group: 'com.google.guava', name: 'guava', version: '25.1-jre'
//    api group: 'com.alibaba', name: 'fastjson', version: '1.2.58'
    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'
//    api group: 'org.jetbrains', name: 'annotations', version: '13.0'
    api group: 'javax.inject', name: 'javax.inject', version: '1'
    api group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    api 'org.javassist:javassist:3.21.0-GA'
    api 'org.reflections:reflections:0.9.9-RC2'


    api 'com.google.code.findbugs:jsr305:3.0.2'
    // vendor
// https://mvnrepository.com/artifact/org.apache.commons/commons-text
//    api group: 'org.apache.commons', name: 'commons-text', version: '1.6'

    testImplementation 'junit:junit:4.12'
}

targetCompatibility = vJavaLang
sourceCompatibility = vJavaLang


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/release' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

javadoc.enabled = false

def findJar(prefix) {
    configurations.runtime.filter { it.name.startsWith(prefix) }
}

def execCmd = { command ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine command
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task updateClassesFiles() {
    dependsOn tasks.build
    doLast {
        def branches = execCmd(['git', 'branch', '--list'])

        if (branches.contains('develop')) {
            if (isTest(env)) {
                execCmd(['git', 'checkout', 'develop'])
            }
        }

        if (branches.contains('release')) {
            if (isProd(env)) {
                execCmd(['git', 'checkout', 'release'])
            }
        }

        def classesDir = "/tmp/java-app-classes/${project.name}/"

        File directory = new File(classesDir);
        if (!directory.exists()) {
            directory.mkdirs();
        } else {
            delete file(classesDir)
        }

        copy {
            from configurations.runtimeClasspath.collect { it }
            into file("$classesDir/libs")
        }

        copy {
            from file(project.buildDir.toPath().toString() + '/classes/java/main')
            into file("$classesDir/classes")
        }
        copy {
            from file(project.buildDir.toPath().toString() + '/resources/main')
            into file("$classesDir/resources")
        }
    }
}

apply plugin: 'idea'
idea {
    //    pathVariables GRADLE_HOME: file("$buildDir")
//    println("build dir $buildDir")
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/java/main")
        downloadJavadoc = false
        downloadSources = true
    }
}
